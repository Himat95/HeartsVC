import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.concurrent.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.stream.Collector;


public class AIPlayer extends Thread {

	private String playerName;
	private int playerScore;
	private int playerId;
	private Hand hand;
	private ArrayList<Card> trickCardsWon;
	private ArrayList<Card> suitableCards = new ArrayList<Card>();;
	private ArrayList<Card> sotm = new ArrayList<>();
	private boolean isReady;
	private Trick trick;
	private Table table;
	private Card drop;
	private MVar<Card> throwingCard;
	private MVar<Integer> result;
	private Card thrownCard; 

	public static Comparator<Card> compareByValue = Comparator.comparingInt(Card::getValue);



	public AIPlayer(String n, int id, Table table, Trick trick) {
		playerName = n;
		playerScore = 0;
		playerId = id;
		hand = new Hand();
		trickCardsWon = new ArrayList<Card>();
		this.table = table;
		isReady = false;
		throwingCard = new MVar<Card>();
		result = new MVar<Integer>();
		this.trick = trick;


		for (int i = 2; i <= 14; i++) {
			sotm.add(new Card(Suit.HEARTS, i));
		}
		sotm.add(new Card(Suit.SPADES, 12));
		Collections.sort(sotm);
	}


	@Override
	public void run() {


		try {
			this.sleep(1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		this.getPlayerHand().sortHand();

		System.out.println("Starting Game|  Player " + this.getPlayerId() + ": " + this.getPlayerHand().getCards());

		this.clubCheck();


		while (table.getIsGameFinished() == false) {


				if (table.getTurn() == this.playerId && table.isPlay() == true) {

					synchronized (trick) {
						
					//System.out.println("Player " + this.getPlayerId() + ": " + this.getPlayerHand().getCards());
					System.out.println(this.playerId + ": Phase 4");
					if (trick.getTrickCards().isEmpty() == true) {

						if (table.getHeartState() == true) { // Can't throw
																// hearts yet!

							this.emptyTrickwithHeartStateOn();
						}

						else {
							this.emptyTrickwithHeartStateOff();
						}

					}

					else {
						if(trick.isTrickFull()) {
							table.setPlay(false);
							table.setResults(true);
						}

						else {
						this.throwLowestSuitable();
						}
						//System.out.println(this.playerId + " Phase 5");
					} // greedy heuristic
					System.out.println(trick.getTrickCards());
				}
					
				}// if table turn == this player


				if (table.isResults() == true) {
					while(table.isResults() == true) {
					if (this == trick.getWinner()) {
							synchronized (trick) {
						System.out.println(this.playerId + ": Getting Results...");
						this.setScore(this.getResult().takeMVar());
						this.addToTrickCardsWon(trick.getTrickCards());
						table.setResults(false);
							}
						}
					else {
						try {
							sleep(1000);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					}
				}

				//this.setReady(false);

//			}
				else {
			try {
				this.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
				}
		} // Game is finished after this

		System.out.println("Player " + this.playerId + ": has finished with the score of " + this.getScore());
		System.out.println(this.getTrickCardsWon());
		System.out.println(this.getPlayerHand() + "\n");
	}


	private void throwLowestSuitable() {
		drop = trick.getTrickCards().stream()
				.filter(x -> trick.getTrickCards().get(0).getSuit() == x.getSuit())
				.max(compareByValue).get();

		this.getPlayerHand().getCards().stream()
		.filter(x -> x.getSuit() == drop.getSuit()).forEach(suitableCards::add);



		if (suitableCards.isEmpty()) {
			//this.getThrownCard().putMVar(this.getPlayerHand().throwExactCard(this.getPlayerHand().getCards().stream().max(compareByValue).get()));
			//this.setReady(true);
			
			trick.addtoTrick(this.getPlayerHand().getCards().stream().max(compareByValue).get(), this);
			
			table.incTurn();
		}

		else { // There are cards in suitable Cards, we want to
				// throw lower than the drop value
			Collections.sort(suitableCards);

			ArrayList<Card> lessthandrop = new ArrayList<Card>();

			//suitableCards.stream().filter(x -> x.getValue() < drop.getValue()).map(lessthandrop::add);
			suitableCards.forEach(x -> {
				if (x.getValue() < drop.getValue()) {
					lessthandrop.add(x);
				}
			});

			if (lessthandrop.isEmpty()) { // no card is smaller than the drop value, throw highest in suitableCards

				//this.getThrownCard().putMVar(this.getPlayerHand().throwExactCard(suitableCards.get(suitableCards.size() - 1)));
				//this.setReady(true);
				trick.addtoTrick(suitableCards.get(suitableCards.size() - 1), this);
				table.incTurn();
			}

			else {
				Collections.sort(lessthandrop); // throw the biggest in lessthandrop

				//this.getThrownCard().putMVar(this.getPlayerHand().throwExactCard(lessthandrop.get(lessthandrop.size() - 1)));
				//this.setReady(true);
				trick.addtoTrick(lessthandrop.get(lessthandrop.size() - 1), this);
				table.incTurn();
			}
			lessthandrop.clear(); // housekeeping!
		}

		suitableCards.clear(); // housekeeping!

	}


	private void emptyTrickwithHeartStateOff() {
		drop = trick.getTrickCards().stream()
				.filter(x -> trick.getTrickCards().get(0).getSuit() == x.getSuit())
				.max(compareByValue).get();


		this.getPlayerHand().getCards().stream()
		.filter(x -> x.getSuit() == drop.getSuit()).forEach(suitableCards::add);


		//this.getThrownCard().putMVar(this.getPlayerHand().throwExactCard(suitableCards.stream().min(compareByValue).get()));

		trick.addtoTrick(suitableCards.stream().min(compareByValue).get(), this);
		table.incTurn();

		suitableCards.clear();

	}


	private void emptyTrickwithHeartStateOn() {
		this.getPlayerHand().getCards().stream().filter(x -> x.getSuit() != Suit.HEARTS)
		.forEach(suitableCards::add);

		//this.getThrownCard().putMVar(this.getPlayerHand().throwExactCard(suitableCards.stream().min(compareByValue).get()));
		trick.addtoTrick(this.getPlayerHand().throwExactCard(suitableCards.stream().min(compareByValue).get()), this);
		table.incTurn();
		suitableCards.clear();


	}

	private void clubCheck() {

		Iterator<Card> iter = this.getPlayerHand().getCards().iterator();

//		while(iter.hasNext()) {
//
//			Card c = iter.next();
//			if (c.equals(new Card(Suit.CLUBS, 2))) {
//				iter.remove();
//				this.getThrownCard().putMVar(c);
//			}
//		}
		this.getPlayerHand().getCards().forEach(x -> {
			if (x.equals(new Card(Suit.CLUBS, 2))) {
				//
				//this.getThrownCard().putMVar(x);

				trick.addtoTrick(x, this);
				table.setTurn(this);
				table.incTurn();
				//this.getPlayerHand().throwExactCard(x);
				System.out.println(trick.getTrickCards());

				}
			});
		
			

		System.out.println("Club check" + "Player " + this.getPlayerId() + ": " + this.getPlayerHand().getCards());

/*		for(Card c :this.getPlayerHand().getCards())
		{
			if (c.equals(new Card(Suit.CLUBS, 2))) {
				iter.remove();
				this.getThrownCard().putMVar(c);
			}
		}*/
	}


	public synchronized MVar<Integer> getResult() {
		return result;
	}

	public synchronized MVar<Card> getThrownCard() {
		return throwingCard;
	}

	public String getPlayerName() {
		return playerName;
	}


	public void setScore(int i) {
		playerScore += i;
	}


	public int getScore() {
		return playerScore;
	}


	public void incScore() {
		playerScore++;
	}


	public void decScore() {
		playerScore--;
	}

	public void resetScore() {
		playerScore = 0;
	}


	public int getPlayerId() {
		return playerId;
	}


	public Hand getPlayerHand() {
		return hand;
	}


	public String toString() {
		return "Player ID: " + playerId + " \t " + "Player: " + playerName + "\t Player Score: " + playerScore;
	}


	public ArrayList<Card> getTrickCardsWon() {
		return trickCardsWon;
	}


	public void addToTrickCardsWon(ArrayList<Card> tc) {
		trickCardsWon.addAll(tc);
	}


	public boolean ShotOverTheMoon() {
		return trickCardsWon.containsAll(sotm);
	}

	public ArrayList<Card> getsotm() {
		return sotm;
	}


	public void sortTrickCardsWon() {
		Collections.sort(trickCardsWon);
	}


	public boolean isReady() {
		return isReady;
	}


	public void setReady(boolean isReady) {
		this.isReady = isReady;
	}



}
