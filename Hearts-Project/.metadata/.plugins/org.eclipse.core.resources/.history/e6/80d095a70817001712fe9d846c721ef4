import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.concurrent.ArrayBlockingQueue;

import org.junit.Test;

public class GreedyHeuristicTests {
	
	public static Comparator<Card> compareByValue = Comparator.comparingInt(Card::getValue);
	Deck d = new Deck(); 
	ArrayBlockingQueue<Player> queue = new ArrayBlockingQueue<Player>(2); 
	Trick t = new Trick(); 
	Table table = new Table(queue, t); 
	AIPlayer p = new AIPlayer("Test Dummy", 0, table, t); 
	
	
	/* Due to the difficulty of running threads only for certain instances, this
	 * test will simply take the algorithm's coding from each situation and test
	 * it with calculated trick input to predict desirable results. 
	 * 
	 * It must be noted that within this test environment, the AIPlayer is given an entire deck (52) 
	 * cards at its disposal. This will be the true test to understand how the AI can filter out cards
	 * Dependent on the trick conditions. 
	 */

	
	
	/* This test is will examine what will the first card thrown by the Player, when the trick
	 * is empty and having the Heart state off (Allowing him to throw hearts).The predicted results is the
	 * player will throw the lowest card within the deck, therefore it will be less than the value of 3. 
	 */
	@Test
	public void test01() {
		queue.add(p);
		t.clearTrick();
		
		//Taken from:	trick.addtoTrick(this.getPlayerHand().getCards().stream().min(compareByValue).get(), this);
		t.addtoTrick(d.getCards().stream().min(compareByValue).get(), p);
		System.out.println("Test 01 |  " + t.getTrickCards());
		assertTrue("Testing the minimal card value thrown when trick is empty with Hearts State off", t.getTrickCards().get(0).getValue() < 3);
	}
	
	
	
	/* Similar to test01 however this time 2 of Spades, 2 of Clubs and 2 of Diamonds is removed, to understand if the 
	 * player truly throws the 2 of hearts when the condition is off. 
	 * 
	 * //Taken from:	trick.addtoTrick(this.getPlayerHand().getCards().stream().min(compareByValue).get(), this);
	 */
	@Test
	public void test02() {
		queue.add(p);
		t.clearTrick();
		
		d.getCards().remove(0); 	// 2 of Spades
		d.getCards().remove(12);	// 2 of Clubs
		d.getCards().remove(24);	// 2 of Diamonds
		
		
		t.addtoTrick(d.getCards().stream().min(compareByValue).get(), p);
		System.out.println("Test 02 |  " + t.getTrickCards());
		assertTrue("Testing the minimal card value thrown when trick is empty with Hearts State off", t.getTrickCards().get(0).getValue() < 3);
	}
	
	/* Same conditions as the previous tests but this time the lower values less than 7 have been removed, and this is
	 * to see if the AIPlayer acknowledges that 7 is the minimum value. 
	 */
	@Test
	public void test03() {
		queue.add(p);
		t.clearTrick();
		

		t.addtoTrick(d.getCards().stream().filter(x -> x.getValue() > 7).min(compareByValue).get(), p);
		System.out.println("Test 03 |  " + t.getTrickCards());
		assertTrue("Testing the minimal card value thrown when trick is empty with Hearts State off", t.getTrickCards().get(0).getValue() == 7);
	}

	
	
	
	@Test
	public void test04() {
		queue.add(p);
		t.clearTrick();
		
		d.getCards().remove(0);
		d.getCards().remove(12);
		//d.getCards().remove(24);
		//Taken from:			trick.addtoTrick(this.getPlayerHand().getCards().stream().filter(x -> x.getSuit() != Suit.HEARTS).min(compareByValue).orElse(this.getPlayerHand().getCards().stream().min(compareByValue).get()), this);

		t.addtoTrick(d.getCards().stream().filter(x -> x.getSuit() != Suit.HEARTS).min(compareByValue).orElse(d.getCards().stream().min(compareByValue).get()), p);
		System.out.println(t.getTrickCards());
		assertTrue("Testing the minimal card value thrown when trick is empty with Hearts State On", t.getTrickCards().get(0).getValue() < 3);
	}
}
