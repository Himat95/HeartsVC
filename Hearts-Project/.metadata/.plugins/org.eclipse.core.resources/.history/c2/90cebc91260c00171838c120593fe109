import java.util.concurrent.ArrayBlockingQueue;

public class Table extends Thread {
	
	private int round;
	private int trickNo;
	private int turn; 
	private boolean heartStateOn;
	private Trick trick; 
	private boolean gameFinished; 
	private ArrayBlockingQueue<AIPlayer> queue; 
	
	
	public Table(ArrayBlockingQueue<AIPlayer> queue2) {
		round = 0; 
		trickNo = 0; 
		heartStateOn = true;
		gameFinished = false; 
		this.queue = queue2; 
	}
	
	
	@Override
	public void run() {
		/*
		 * Check for players (4) 
		 * shuffle and deal cards to each player
		 * increment trickno, and create a new trick
		 * notify all players to search for clubs (start game)
		 * increment turn variabe and notify that player
		 * check if trick is full, 
		 * calculate winner and return the score
		 * new trick and increment trickno, check heart state
		 * notify winning players to start next turn. 
		 */
	
		Deck d = new Deck(); 
		d.shuffle();
		
		queue.forEach(x -> x.getPlayerHand().addCards(d.dealCards()));
	}
	
	
	
	public int getRound() {
		return round; 
	}
	
	public void incRound() {
		round++; 
	}
	
	public Trick newTrick() {
		trick = new Trick(); 
		return trick; 
	}
	
	public void incTrickNo() {
		trickNo++; 
	}
	
	public int getTrickNo() {
		return trickNo; 
	}
	
	public void resetTrickNo() {
		trickNo = 0; 
	}
	
	public void resetRound() {
		round = 0; 
	}
	
	public void setTurn(Player p) {
		turn = p.getPlayerId(); 
	}
	
	public int getTurn() {
		return turn; 
	}
	
	public void incTurn() {
		turn = turn++ % 4; 
	}
	
	public void setHeartState(boolean b) {
		heartStateOn = b; 
	}
	
	public boolean getHeartState() {
		return heartStateOn; 
	}
	
	public void setIsGameFinished(boolean b) {
		gameFinished = b; 
	}
	
	public boolean getIsGameFinished() {
		return gameFinished; 
	}
	
}
