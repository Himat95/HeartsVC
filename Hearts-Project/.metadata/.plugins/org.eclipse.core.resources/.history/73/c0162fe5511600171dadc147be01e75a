import static org.junit.Assert.*;

import org.junit.Test;

public class TableTests {

	@Test
	public void test01() {
		Table t = new Table(null, null); 
		assertTrue("Testing Heart State, its always on at start of a game", t.getHeartState() == true);
	}
	
	@Test
	public void test02() {
		Table t = new Table(null, null); 
		t.setHeartState(false);
		assertTrue("Testing Heart State, turning it off (Hearts is broken)", !t.getHeartState() == true);
	}
	
	@Test
	public void test03() {
		Table t = new Table(null, null); 
		assertTrue("Testing starting round", t.getRound() == 0);
	}
	
	@Test
	public void test04() {
		Table t = new Table(null, null); 
		t.incRound();
		assertTrue("Testing increment", t.getRound() == 1);
	}
	
	@Test
	public void test05() {
		Table t = new Table(null, null); 
		assertTrue("Trick starts from 0", t.getTrickNo() == 0);
	}
	
	@Test
	public void test06() {
		Table t = new Table(null, null); 
		t.incTrickNo();
		assertTrue("incrementing trick number", t.getTrickNo() == 1);
	}
	
	@Test
	public void test07() {
		Table t = new Table(null, null); 
		assertTrue("Turn is not equal to 0,1,2,3 at start", t.getTurn() != 0 && t.getTurn() != 1
				&& t.getTurn() != 2 && t.getTurn() != 3);
		
		/* This design decision was taken due to threads having errors of starting the algorithm as they thought it was their
		 * turn before the Clubs check even took place, therefore the value of turn is 5 at the start of the game to stop
		 * any threads from jumping ahead from the Clubs check and diving right into the game. 
		 */
	}

	@Test
	public void test08() {
		Table t = new Table(null, null); 
		Player p = new AIPlayer("Test", 2, t, null); 
		t.setTurn(p);
		assertTrue("Turn is not equal to 0,1,2,3 at start", t.getTurn() == p.getPlayerId());
	}

}
